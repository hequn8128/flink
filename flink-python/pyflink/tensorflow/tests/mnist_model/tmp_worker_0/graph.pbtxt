node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "/Users/hequn.chq/tensorflow_datasets/mnist/3.0.0/mnist-test.tfrecord-00000-of-00001"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cycle_length"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
}
node {
  name: "block_length"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelInterleaveDatasetV2"
  op: "ParallelInterleaveDatasetV2"
  input: "TensorSliceDataset"
  input: "cycle_length"
  input: "block_length"
  input: "num_parallel_calls"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_classfunctools.partial_27"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
}
node {
  name: "num_parallel_calls_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "ParallelInterleaveDatasetV2"
  input: "num_parallel_calls_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_ExampleParser.parse_example_48"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "num_parallel_calls_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset_1"
  op: "ParallelMapDataset"
  input: "ParallelMapDataset"
  input: "num_parallel_calls_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_classfunctools.partial_139"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "num_parallel_calls_3"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset_2"
  op: "ParallelMapDataset"
  input: "ParallelMapDataset_1"
  input: "num_parallel_calls_3"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_lambda_147"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_2"
  input: "buffer_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "normalize_element_1/component_0"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "/Users/hequn.chq/tensorflow_datasets/mnist/3.0.0/mnist-train.tfrecord-00000-of-00001"
      }
    }
  }
}
node {
  name: "normalize_element_1/component_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "normalize_element_1/component_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "TensorSliceDataset_1"
  op: "TensorSliceDataset"
  input: "normalize_element_1/component_0"
  input: "normalize_element_1/component_1"
  input: "normalize_element_1/component_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cycle_length_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
}
node {
  name: "block_length_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
}
node {
  name: "num_parallel_calls_4"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "ParallelInterleaveDatasetV2_1"
  op: "ParallelInterleaveDatasetV2"
  input: "TensorSliceDataset_1"
  input: "cycle_length_1"
  input: "block_length_1"
  input: "num_parallel_calls_4"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_classfunctools.partial_177"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
}
node {
  name: "num_parallel_calls_5"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset_3"
  op: "ParallelMapDataset"
  input: "ParallelInterleaveDatasetV2_1"
  input: "num_parallel_calls_5"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_ExampleParser.parse_example_198"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "num_parallel_calls_6"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset_4"
  op: "ParallelMapDataset"
  input: "ParallelMapDataset_3"
  input: "num_parallel_calls_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_classfunctools.partial_289"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "num_parallel_calls_7"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ParallelMapDataset_5"
  op: "ParallelMapDataset"
  input: "ParallelMapDataset_4"
  input: "num_parallel_calls_7"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_lambda_297"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "PrefetchDataset_1"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_5"
  input: "buffer_size_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "num_shards"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2
      }
    }
  }
}
node {
  name: "index"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "ShardDataset"
  op: "ShardDataset"
  input: "PrefetchDataset_1"
  input: "num_shards"
  input: "index"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "require_non_empty"
    value {
      b: false
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 3
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShardDataset"
  input: "count"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MapDataset"
  op: "MapDataset"
  input: "RepeatDataset"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_scale_315"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
}
node {
  name: "buffer_size_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "MapDataset"
  input: "buffer_size_2"
  input: "seed"
  input: "seed2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 64
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "ShuffleDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "max_intra_op_parallelism"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "MaxIntraOpParallelismDataset"
  op: "MaxIntraOpParallelismDataset"
  input: "BatchDatasetV2"
  input: "max_intra_op_parallelism"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "num_threads"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
}
node {
  name: "PrivateThreadPoolDataset"
  op: "PrivateThreadPoolDataset"
  input: "MaxIntraOpParallelismDataset"
  input: "num_threads"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 5
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "map_fusion"
        string_val: "map_parallelization"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "PrivateThreadPoolDataset"
  input: "optimizations"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
        s: "map_vectorization:use_choose_fastest:false"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "/cpu:0"
      }
    }
  }
}
node {
  name: "MultiDeviceIterator"
  op: "MultiDeviceIterator"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "devices"
    value {
      list {
        s: "/job:worker/replica:0/task:0/device:CPU:0"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MultiDeviceIteratorInit/max_buffer_size"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "MultiDeviceIteratorInit"
  op: "MultiDeviceIteratorInit"
  input: "ModelDataset"
  input: "MultiDeviceIterator"
  input: "MultiDeviceIteratorInit/max_buffer_size"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "MultiDeviceIteratorToStringHandle"
  op: "MultiDeviceIteratorToStringHandle"
  input: "MultiDeviceIterator"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "GeneratorDataset"
  op: "GeneratorDataset"
  input: "Const"
  input: "MultiDeviceIteratorToStringHandle"
  input: "Const"
  input: "MultiDeviceIteratorInit"
  input: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tfinalize_func_args"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tinit_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tnext_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "finalize_func"
    value {
      func {
        name: "__inference__remote_finalize_func_375"
      }
    }
  }
  attr {
    key: "init_func"
    value {
      func {
        name: "__inference__remote_init_func_345"
      }
    }
  }
  attr {
    key: "next_func"
    value {
      func {
        name: "__inference__remote_next_func_364"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "GeneratorDataset_1"
  op: "GeneratorDataset"
  input: "Const"
  input: "MultiDeviceIteratorToStringHandle"
  input: "Const"
  input: "MultiDeviceIteratorInit"
  input: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Tfinalize_func_args"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tinit_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "Tnext_func_args"
    value {
      list {
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "finalize_func"
    value {
      func {
        name: "__inference__remote_finalize_func_375"
      }
    }
  }
  attr {
    key: "init_func"
    value {
      func {
        name: "__inference__remote_init_func_345"
      }
    }
  }
  attr {
    key: "next_func"
    value {
      func {
        name: "__inference__remote_next_func_364"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "buffer_size_3"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "PrefetchDataset_2"
  op: "PrefetchDataset"
  input: "GeneratorDataset_1"
  input: "buffer_size_3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "PrefetchDataset_2"
  input: "IteratorV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^MakeIterator"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000000
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "Identity/ReadVariableOp"
  device: "/job:worker/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Identity_1"
  op: "Identity"
  input: "Identity"
  device: "/job:worker/task:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv2d_input"
  op: "Placeholder"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 28
        }
        dim {
          size: 28
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/min"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14213381707668304
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/max"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14213381707668304
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2d/kernel/Initializer/random_uniform/max"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2d/kernel/Initializer/random_uniform/RandomUniform"
  input: "conv2d/kernel/Initializer/random_uniform/sub"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "conv2d/kernel/Initializer/random_uniform/mul"
  input: "conv2d/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000001
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/kernel"
    }
  }
}
node {
  name: "conv2d/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2d/kernel/Assign"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "conv2d/kernel/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/bias/Initializer/zeros"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2d/bias/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000002
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "conv2d/bias"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "conv2d/bias"
    }
  }
}
node {
  name: "conv2d/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "conv2d/bias/Assign"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "conv2d/bias/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/dilation_rate"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/Conv2D"
  op: "Conv2D"
  input: "conv2d_input"
  input: "conv2d/Conv2D/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2d/BiasAdd"
  op: "BiasAdd"
  input: "conv2d/Conv2D"
  input: "conv2d/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2d/Relu"
  op: "Relu"
  input: "conv2d/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "max_pooling2d/MaxPool"
  op: "MaxPool"
  input: "conv2d/Relu"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 13
          }
          dim {
            size: 13
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "flatten/Const"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377 \025\000\000"
      }
    }
  }
}
node {
  name: "flatten/Reshape"
  op: "Reshape"
  input: "max_pooling2d/MaxPool"
  input: "flatten/Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5408
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \025\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03311330825090408
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03311330825090408
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense/kernel/Initializer/random_uniform/max"
  input: "dense/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense/kernel/Initializer/random_uniform/sub"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense/kernel/Initializer/random_uniform/mul"
  input: "dense/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000003
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5408
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5408
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/kernel"
    }
  }
}
node {
  name: "dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "dense/kernel/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Initializer/zeros"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense/bias/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000004
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense/bias"
    }
  }
}
node {
  name: "dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense/bias/Assign"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "dense/bias/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "flatten/Reshape"
  input: "dense/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2847473919391632
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2847473919391632
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dense_1/kernel/Initializer/random_uniform/max"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dense_1/kernel/Initializer/random_uniform/sub"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "dense_1/kernel/Initializer/random_uniform/mul"
  input: "dense_1/kernel/Initializer/random_uniform/min"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000005
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/kernel"
    }
  }
}
node {
  name: "dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "dense_1/kernel/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Initializer/zeros"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias/Initializer/CollectiveBcastRecv"
  op: "CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 1000006
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VarHandleOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dense_1/bias"
    }
  }
}
node {
  name: "dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "dense_1/bias/Initializer/CollectiveBcastRecv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "dense/Relu"
  input: "dense_1/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "sequential/conv2d/Conv2D/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/conv2d/Conv2D"
  op: "Conv2D"
  input: "IteratorGetNext"
  input: "sequential/conv2d/Conv2D/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "sequential/conv2d/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "sequential/conv2d/Conv2D"
  input: "sequential/conv2d/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/conv2d/Relu"
  op: "Relu"
  input: "sequential/conv2d/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "sequential/max_pooling2d/MaxPool"
  op: "MaxPool"
  input: "sequential/conv2d/Relu"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 13
          }
          dim {
            size: 13
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "sequential/flatten/Const"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377 \025\000\000"
      }
    }
  }
}
node {
  name: "sequential/flatten/Reshape"
  op: "Reshape"
  input: "sequential/max_pooling2d/MaxPool"
  input: "sequential/flatten/Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5408
          }
        }
      }
    }
  }
}
node {
  name: "sequential/dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/dense/MatMul"
  op: "MatMul"
  input: "sequential/flatten/Reshape"
  input: "sequential/dense/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential/dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/dense/BiasAdd"
  op: "BiasAdd"
  input: "sequential/dense/MatMul"
  input: "sequential/dense/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/dense/Relu"
  op: "Relu"
  input: "sequential/dense/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "sequential/dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/dense_1/MatMul"
  op: "MatMul"
  input: "sequential/dense/Relu"
  input: "sequential/dense_1/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "sequential/dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sequential/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "sequential/dense_1/MatMul"
  input: "sequential/dense_1/BiasAdd/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "sequential/dense_1/Softmax"
  op: "Softmax"
  input: "sequential/dense_1/BiasAdd"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/Shape"
  op: "Shape"
  input: "sequential/dense_1/Softmax"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Shape"
  input: "IteratorGetNext:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "sequential/dense_1/Softmax"
  input: "IteratorGetNext:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/Cast/x"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/weights/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/weights/rank"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/values/shape"
  op: "Shape"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/values/rank"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like/Shape"
  op: "Shape"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "^sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like/Const"
  op: "Const"
  input: "^sparse_categorical_crossentropy/weighted_loss/broadcast_weights/assert_broadcastable/static_scalar_check_success"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like"
  op: "Fill"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like/Shape"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like/Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights"
  op: "Mul"
  input: "sparse_categorical_crossentropy/weighted_loss/Cast/x"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights/ones_like"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sparse_categorical_crossentropy/weighted_loss/Mul"
  op: "Mul"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "sparse_categorical_crossentropy/weighted_loss/Mul"
  input: "Const_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul/y"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.015625
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "Sum"
  input: "mul/y"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "mul_1/y"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "mul"
  input: "mul_1/y"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/Fill"
  input: "mul_1/y"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/Fill"
  input: "mul"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_1_grad/Mul"
  input: "^gradients/mul_1_grad/Mul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_1_grad/Mul"
  input: "^gradients/mul_1_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_1_grad/Mul_1"
  input: "^gradients/mul_1_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul"
  op: "Mul"
  input: "gradients/mul_1_grad/tuple/control_dependency"
  input: "mul/y"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/mul_1_grad/tuple/control_dependency"
  input: "Sum"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/Mul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/Mul"
  input: "^gradients/mul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/Mul_1"
  input: "^gradients/mul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/tuple/control_dependency"
  input: "gradients/Sum_grad/Reshape/shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape"
  op: "Shape"
  input: "sparse_categorical_crossentropy/weighted_loss/Mul"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/Shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_grad/Tile"
  input: "sparse_categorical_crossentropy/weighted_loss/broadcast_weights"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Mul"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/BroadcastGradientArgs"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Sum"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  input: "gradients/Sum_grad/Tile"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Mul_1"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Sum_1"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Shape_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape"
  input: "^gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape"
  input: "^gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape_1"
  input: "^gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  op: "PreventGradient"
  input: "sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "message"
    value {
      s: "Currently there is no way to take the second derivative of sparse_softmax_cross_entropy_with_logits due to the fused implementation\'s interaction with tf.gradients()"
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/sparse_categorical_crossentropy/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/PreventGradient"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "sequential/dense_1/Softmax"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/sequential/dense_1/Softmax_grad/mul"
  input: "gradients/sequential/dense_1/Softmax_grad/Sum/reduction_indices"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sequential/dense_1/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  input: "gradients/sequential/dense_1/Softmax_grad/Sum"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/sequential/dense_1/Softmax_grad/sub"
  input: "sequential/dense_1/Softmax"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/sequential/dense_1/Softmax_grad/mul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/sequential/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/dense_1/Softmax_grad/mul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/dense_1/Softmax_grad/mul_1"
  input: "^gradients/sequential/dense_1/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense_1/Softmax_grad/mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/dense_1/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/sequential/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "sequential/dense_1/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sequential/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "sequential/dense/Relu"
  input: "gradients/sequential/dense_1/BiasAdd_grad/tuple/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sequential/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/dense_1/MatMul_grad/MatMul"
  input: "^gradients/sequential/dense_1/MatMul_grad/MatMul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/dense_1/MatMul_grad/MatMul"
  input: "^gradients/sequential/dense_1/MatMul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/sequential/dense_1/MatMul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/sequential/dense_1/MatMul_grad/tuple/control_dependency"
  input: "sequential/dense/Relu"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/sequential/dense/Relu_grad/ReluGrad"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/sequential/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/dense/Relu_grad/ReluGrad"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/dense/Relu_grad/ReluGrad"
  input: "^gradients/sequential/dense/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/dense/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/sequential/dense/BiasAdd_grad/tuple/control_dependency"
  input: "sequential/dense/MatMul/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5408
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sequential/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "sequential/flatten/Reshape"
  input: "gradients/sequential/dense/BiasAdd_grad/tuple/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sequential/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/dense/MatMul_grad/MatMul"
  input: "^gradients/sequential/dense/MatMul_grad/MatMul_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/dense/MatMul_grad/MatMul"
  input: "^gradients/sequential/dense/MatMul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5408
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/dense/MatMul_grad/MatMul_1"
  input: "^gradients/sequential/dense/MatMul_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/dense/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/flatten/Reshape_grad/Shape"
  op: "Shape"
  input: "sequential/max_pooling2d/MaxPool"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequential/flatten/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/sequential/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/sequential/flatten/Reshape_grad/Shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 13
          }
          dim {
            size: 13
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/max_pooling2d/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "sequential/conv2d/Relu"
  input: "sequential/max_pooling2d/MaxPool"
  input: "gradients/sequential/flatten/Reshape_grad/Reshape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/sequential/max_pooling2d/MaxPool_grad/MaxPoolGrad"
  input: "sequential/conv2d/Relu"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/sequential/conv2d/Relu_grad/ReluGrad"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/sequential/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/conv2d/Relu_grad/ReluGrad"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/conv2d/Relu_grad/ReluGrad"
  input: "^gradients/sequential/conv2d/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/conv2d/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 26
          }
          dim {
            size: 26
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/sequential/conv2d/BiasAdd_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "IteratorGetNext"
  input: "sequential/conv2d/Conv2D/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/sequential/conv2d/Conv2D_grad/ShapeN"
  input: "sequential/conv2d/Conv2D/ReadVariableOp"
  input: "gradients/sequential/conv2d/BiasAdd_grad/tuple/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "IteratorGetNext"
  input: "gradients/sequential/conv2d/Conv2D_grad/ShapeN:1"
  input: "gradients/sequential/conv2d/BiasAdd_grad/tuple/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropInput"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/sequential/conv2d/Conv2D_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sequential/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/sequential/conv2d/Conv2D_grad/tuple/group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sequential/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce"
  op: "CollectiveReduce"
  input: "gradients/sequential/conv2d/Conv2D_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 100
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce_1"
  op: "CollectiveReduce"
  input: "gradients/sequential/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 101
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce_2"
  op: "CollectiveReduce"
  input: "gradients/sequential/dense/MatMul_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 102
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce_3"
  op: "CollectiveReduce"
  input: "gradients/sequential/dense/BiasAdd_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 103
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce_4"
  op: "CollectiveReduce"
  input: "gradients/sequential/dense_1/MatMul_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 104
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "allreduce/CollectiveReduce_5"
  op: "CollectiveReduce"
  input: "gradients/sequential/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 105
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "GradientDescent/learning_rate"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999747378752e-05
      }
    }
  }
}
node {
  name: "GradientDescent/update_0/update_conv2d/kernel/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "conv2d/kernel"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_1/update_conv2d/bias/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "conv2d/bias"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_2/update_dense/kernel/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense/kernel"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_3/update_dense/bias/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense/bias"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce_3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_4/update_dense_1/kernel/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense_1/kernel"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce_4"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_5/update_dense_1/bias/ResourceApplyGradientDescent"
  op: "ResourceApplyGradientDescent"
  input: "dense_1/bias"
  input: "GradientDescent/learning_rate"
  input: "allreduce/CollectiveReduce_5"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_0_6/update"
  op: "NoOp"
  input: "^GradientDescent/update_0/update_conv2d/kernel/ResourceApplyGradientDescent"
  input: "^GradientDescent/update_0_1/update_conv2d/bias/ResourceApplyGradientDescent"
  input: "^GradientDescent/update_0_2/update_dense/kernel/ResourceApplyGradientDescent"
  input: "^GradientDescent/update_0_3/update_dense/bias/ResourceApplyGradientDescent"
  input: "^GradientDescent/update_0_4/update_dense_1/kernel/ResourceApplyGradientDescent"
  input: "^GradientDescent/update_0_5/update_dense_1/bias/ResourceApplyGradientDescent"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "GradientDescent/update_0_7/Const"
  op: "Const"
  input: "^GradientDescent/update_0_6/update"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "GradientDescent/update_0_7/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "GradientDescent/update_0_7/Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "GradientDescent/update_0_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^GradientDescent/update_0_6/update"
  input: "^GradientDescent/update_0_7/AssignAddVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "allreduce_1/CollectiveReduce"
  op: "CollectiveReduce"
  input: "mul"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "communication_hint"
    value {
      s: "auto"
    }
  }
  attr {
    key: "final_op"
    value {
      s: "Id"
    }
  }
  attr {
    key: "group_key"
    value {
      i: 1
    }
  }
  attr {
    key: "group_size"
    value {
      i: 2
    }
  }
  attr {
    key: "instance_key"
    value {
      i: 106
    }
  }
  attr {
    key: "merge_op"
    value {
      s: "Add"
    }
  }
  attr {
    key: "subdiv_offsets"
    value {
      list {
        i: 0
      }
    }
  }
  attr {
    key: "wait_for"
    value {
      list {
      }
    }
  }
}
node {
  name: "truediv/y"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "allreduce_1/CollectiveReduce"
  input: "truediv/y"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Identity_2"
  op: "Identity"
  input: "truediv"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_1"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_2"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_3"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_4"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_5"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalAnd_6"
  op: "LogicalAnd"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/LogicalAnd"
  input: "report_uninitialized_variables/LogicalAnd_1"
  input: "report_uninitialized_variables/LogicalAnd_2"
  input: "report_uninitialized_variables/LogicalAnd_3"
  input: "report_uninitialized_variables/LogicalAnd_4"
  input: "report_uninitialized_variables/LogicalAnd_5"
  input: "report_uninitialized_variables/LogicalAnd_6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "conv2d/kernel"
        string_val: "conv2d/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Identity_2"
  device: "/job:worker/task:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^group_deps"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_2"
  op: "NoOp"
  input: "^global_step/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_3"
  op: "NoOp"
  input: "^conv2d/kernel/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_4"
  op: "NoOp"
  input: "^conv2d/bias/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_5"
  op: "NoOp"
  input: "^dense/kernel/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_6"
  op: "NoOp"
  input: "^dense/bias/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_7"
  op: "NoOp"
  input: "^dense_1/kernel/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_8"
  op: "NoOp"
  input: "^dense_1/bias/Assign"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "init"
  op: "NoOp"
  input: "^group_deps_2"
  input: "^group_deps_3"
  input: "^group_deps_4"
  input: "^group_deps_5"
  input: "^group_deps_6"
  input: "^group_deps_7"
  input: "^group_deps_8"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "init_1"
  op: "NoOp"
  device: "/job:worker/task:0"
}
node {
  name: "group_deps_9/NoOp"
  op: "NoOp"
  input: "^init"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "group_deps_9/NoOp_1"
  op: "NoOp"
  input: "^init_1"
  device: "/job:worker/task:0"
}
node {
  name: "group_deps_9"
  op: "NoOp"
  input: "^group_deps_9/NoOp"
  input: "^group_deps_9/NoOp_1"
  device: "/job:worker/task:0"
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "global_step"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "conv2d/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_1"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "conv2d/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_2"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dense/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_3"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dense/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_4"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dense_1/kernel"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_5"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "dense_1/bias"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalAnd_6"
  op: "LogicalAnd"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/LogicalAnd"
  input: "report_uninitialized_variables_1/LogicalAnd_1"
  input: "report_uninitialized_variables_1/LogicalAnd_2"
  input: "report_uninitialized_variables_1/LogicalAnd_3"
  input: "report_uninitialized_variables_1/LogicalAnd_4"
  input: "report_uninitialized_variables_1/LogicalAnd_5"
  input: "report_uninitialized_variables_1/LogicalAnd_6"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "global_step"
        string_val: "conv2d/kernel"
        string_val: "conv2d/bias"
        string_val: "dense/kernel"
        string_val: "dense/bias"
        string_val: "dense_1/kernel"
        string_val: "dense_1/bias"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/job:worker/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  device: "/job:worker/task:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  device: "/job:worker/task:0"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  device: "/job:worker/task:0"
}
node {
  name: "init_3"
  op: "NoOp"
  device: "/job:worker/task:0"
}
node {
  name: "group_deps_10"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
  device: "/job:worker/task:0"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  device: "/job:worker/task:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_44dbcc05f1ef4895a0db4f96a371c631/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  device: "/job:worker/task:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  device: "/job:worker/task:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Read_12/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/Identity_24"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/Read_13/ReadVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/Identity_26"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "save/Identity_15"
  input: "save/Identity_17"
  input: "save/Identity_19"
  input: "save/Identity_21"
  input: "save/Identity_23"
  input: "save/Identity_25"
  input: "save/Identity_27"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: "conv2d/bias"
        string_val: "conv2d/kernel"
        string_val: "dense/bias"
        string_val: "dense/kernel"
        string_val: "dense_1/bias"
        string_val: "dense_1/kernel"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 7
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "conv2d/bias"
  input: "save/RestoreV2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp"
  op: "ReadVariableOp"
  input: "conv2d/bias"
  input: "^save/AssignVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "conv2d/kernel"
  input: "save/RestoreV2:1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "conv2d/kernel"
  input: "^save/AssignVariableOp_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_1"
  op: "NoOp"
  input: "^save/AssignVariableOp_1"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dense/bias"
  input: "save/RestoreV2:2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "dense/bias"
  input: "^save/AssignVariableOp_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_2"
  op: "NoOp"
  input: "^save/AssignVariableOp_2"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dense/kernel"
  input: "save/RestoreV2:3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "dense/kernel"
  input: "^save/AssignVariableOp_3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5408
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_3"
  op: "NoOp"
  input: "^save/AssignVariableOp_3"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dense_1/bias"
  input: "save/RestoreV2:4"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_4"
  op: "ReadVariableOp"
  input: "dense_1/bias"
  input: "^save/AssignVariableOp_4"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_4"
  op: "NoOp"
  input: "^save/AssignVariableOp_4"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dense_1/kernel"
  input: "save/RestoreV2:5"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/ReadVariableOp_5"
  op: "ReadVariableOp"
  input: "dense_1/kernel"
  input: "^save/AssignVariableOp_5"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/group_deps_5"
  op: "NoOp"
  input: "^save/AssignVariableOp_5"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/RestoreV2:6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/ReadVariableOp_6"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^save/AssignVariableOp_6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/group_deps_6"
  op: "NoOp"
  input: "^save/AssignVariableOp_6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/group_deps"
  input: "^save/group_deps_1"
  input: "^save/group_deps_2"
  input: "^save/group_deps_3"
  input: "^save/group_deps_4"
  input: "^save/group_deps_5"
  input: "^save/group_deps_6"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
  device: "/job:worker/replica:0/task:0/device:CPU:0"
}
library {
  function {
    signature {
      name: "__inference_Dataset_map_ExampleParser.parse_example_198"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const_1"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "image"
            string_val: "label"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2"
      op: "ParseExampleV2"
      input: "args_0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/names:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys:output:0"
      input: "ParseSingleExample/ParseExample/Const:output:0"
      input: "ParseSingleExample/ParseExample/Const_1:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "ragged_split_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "ragged_value_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2"
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape/shape"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:0"
      input: "Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1/shape"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:1"
      input: "Reshape_1/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Reshape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_true_231"
      input_arg {
        name: "decodepng_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
    }
    node_def {
      name: "DecodePng"
      op: "DecodePng"
      input: "decodepng_args_0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      experimental_debug_info {
        original_node_names: "DecodePng"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodePng:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__remote_finalize_func_375"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "string_handle"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__finalize_func_369"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RemoteCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_false_232"
      input_arg {
        name: "cond_gif_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "is_gif_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_gif"
    }
    node_def {
      name: "is_gif/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "GIF"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif/y"
      }
    }
    node_def {
      name: "is_gif"
      op: "Equal"
      input: "is_gif_decode_image_substr"
      input: "is_gif/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif"
      }
    }
    node_def {
      name: "cond_gif"
      op: "If"
      input: "is_gif:z:0"
      input: "cond_gif_args_0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_gif_false_243"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_gif_true_242"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif"
      }
    }
    node_def {
      name: "cond_gif/Identity"
      op: "Identity"
      input: "cond_gif:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_gif/Identity:output:0"
      input: "^cond_gif"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_gif"
      value: "cond_gif"
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_false_213"
      input_arg {
        name: "is_png_substr_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "cond_png_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_png"
    }
    node_def {
      name: "is_png/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/pos"
      }
    }
    node_def {
      name: "is_png/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/len"
      }
    }
    node_def {
      name: "is_png/Substr"
      op: "Substr"
      input: "is_png_substr_args_0"
      input: "is_png/Substr/pos:output:0"
      input: "is_png/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr"
      }
    }
    node_def {
      name: "is_png/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\211PN"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal/y"
      }
    }
    node_def {
      name: "is_png/Equal"
      op: "Equal"
      input: "is_png/Substr:output:0"
      input: "is_png/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal"
      }
    }
    node_def {
      name: "cond_png"
      op: "If"
      input: "is_png/Equal:z:0"
      input: "is_png_substr_args_0"
      input: "cond_png_decode_image_substr"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_png_false_232"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_png_true_231"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png"
      }
    }
    node_def {
      name: "cond_png/Identity"
      op: "Identity"
      input: "cond_png:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_png/Identity:output:0"
      input: "^cond_png"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_png"
      value: "cond_png"
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_true_62"
      input_arg {
        name: "decodejpeg_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_jpeg_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/x"
      }
    }
    node_def {
      name: "check_jpeg_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/y"
      }
    }
    node_def {
      name: "check_jpeg_channels"
      op: "NotEqual"
      input: "check_jpeg_channels/x:output:0"
      input: "check_jpeg_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "check_jpeg_channels:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "decodejpeg_args_0"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeJpeg"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeJpeg:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
  }
  function {
    signature {
      name: "__inference__next_func_355"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "multideviceiteratorgetnextfromshard_multideviceiteratorinit"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "MultiDeviceIteratorFromStringHandle"
      control_output: "MultiDeviceIteratorGetNextFromShard"
    }
    node_def {
      name: "MultiDeviceIteratorFromStringHandle"
      op: "MultiDeviceIteratorFromStringHandle"
      input: "string_handle"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MultiDeviceIteratorFromStringHandle"
      }
    }
    node_def {
      name: "MultiDeviceIteratorGetNextFromShard/shard_num"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MultiDeviceIteratorGetNextFromShard/shard_num"
      }
    }
    node_def {
      name: "MultiDeviceIteratorGetNextFromShard"
      op: "MultiDeviceIteratorGetNextFromShard"
      input: "MultiDeviceIteratorFromStringHandle:multi_device_iterator:0"
      input: "MultiDeviceIteratorGetNextFromShard/shard_num:output:0"
      input: "multideviceiteratorgetnextfromshard_multideviceiteratorinit"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
          }
        }
      }
      experimental_debug_info {
        original_node_names: "MultiDeviceIteratorGetNextFromShard"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "MultiDeviceIteratorGetNextFromShard:components:0"
      input: "^MultiDeviceIteratorFromStringHandle"
      input: "^MultiDeviceIteratorGetNextFromShard"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "MultiDeviceIteratorGetNextFromShard:components:1"
      input: "^MultiDeviceIteratorFromStringHandle"
      input: "^MultiDeviceIteratorGetNextFromShard"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "MultiDeviceIteratorFromStringHandle"
      value: "MultiDeviceIteratorFromStringHandle"
    }
    control_ret {
      key: "MultiDeviceIteratorGetNextFromShard"
      value: "MultiDeviceIteratorGetNextFromShard"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_true_212"
      input_arg {
        name: "decodejpeg_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_jpeg_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/x"
      }
    }
    node_def {
      name: "check_jpeg_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/y"
      }
    }
    node_def {
      name: "check_jpeg_channels"
      op: "NotEqual"
      input: "check_jpeg_channels/x:output:0"
      input: "check_jpeg_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "check_jpeg_channels:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "decodejpeg_args_0"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeJpeg"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeJpeg:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
  }
  function {
    signature {
      name: "__inference__finalize_func_369"
      input_arg {
        name: "unused_string_handle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "unused_string_handle"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_true_242"
      input_arg {
        name: "decodegif_args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_gif_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/x"
      }
    }
    node_def {
      name: "check_gif_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/y"
      }
    }
    node_def {
      name: "check_gif_channels"
      op: "NotEqual"
      input: "check_gif_channels/x:output:0"
      input: "check_gif_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels"
      }
    }
    node_def {
      name: "check_gif_channels_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/x"
      }
    }
    node_def {
      name: "check_gif_channels_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/y"
      }
    }
    node_def {
      name: "check_gif_channels_1"
      op: "NotEqual"
      input: "check_gif_channels_1/x:output:0"
      input: "check_gif_channels_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1"
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "check_gif_channels:z:0"
      input: "check_gif_channels_1:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "LogicalAnd"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "LogicalAnd:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeGif"
      op: "DecodeGif"
      input: "decodegif_args_0"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeGif"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeGif:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_lambda_147"
      input_arg {
        name: "args_0"
        type: DT_UINT8
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "args_0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 28
            }
            dim {
              size: 28
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__remote_next_func_364"
      input_arg {
        name: "string_handle"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_multideviceiteratorinit"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "string_handle"
      input: "remotecall_multideviceiteratorinit"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__next_func_355"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RemoteCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "RemoteCall:output:1"
      input: "^RemoteCall"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    attr {
      key: "experimental_ints_on_device"
      value {
        b: true
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "string_handle"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_interleave_classfunctools.partial_27"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames/shape"
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames"
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorSliceDataset"
      }
    }
    node_def {
      name: "cycle_length"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cycle_length"
      }
    }
    node_def {
      name: "block_length"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "block_length"
      }
    }
    node_def {
      name: "sloppy"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sloppy"
      }
    }
    node_def {
      name: "buffer_output_elements"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_output_elements"
      }
    }
    node_def {
      name: "prefetch_input_elements"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "prefetch_input_elements"
      }
    }
    node_def {
      name: "ParallelInterleaveDataset"
      op: "ParallelInterleaveDataset"
      input: "TensorSliceDataset:handle:0"
      input: "cycle_length:output:0"
      input: "block_length:output:0"
      input: "sloppy:output:0"
      input: "buffer_output_elements:output:0"
      input: "prefetch_input_elements:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_tf_data_experimental_parallel_interleave_read_one_file_19"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParallelInterleaveDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "ParallelInterleaveDataset:handle:0"
      input: "^TensorSliceDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_true_81"
      input_arg {
        name: "decodepng_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
    }
    node_def {
      name: "DecodePng"
      op: "DecodePng"
      input: "decodepng_args_0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      experimental_debug_info {
        original_node_names: "DecodePng"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodePng:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_tf_data_experimental_parallel_interleave_read_one_file_169"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "compression_type"
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 8388608
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_size"
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TFRecordDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_ExampleParser.parse_example_48"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const_1"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "image"
            string_val: "label"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2"
      op: "ParseExampleV2"
      input: "args_0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/names:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys:output:0"
      input: "ParseSingleExample/ParseExample/Const:output:0"
      input: "ParseSingleExample/ParseExample/Const_1:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "ragged_split_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "ragged_value_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2"
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape/shape"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:0"
      input: "Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1/shape"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:1"
      input: "Reshape_1/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Reshape_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_false_243"
      input_arg {
        name: "substr_args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
      control_output: "Assert_1/Assert"
    }
    node_def {
      name: "Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/pos"
      }
    }
    node_def {
      name: "Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/len"
      }
    }
    node_def {
      name: "Substr"
      op: "Substr"
      input: "substr_args_0"
      input: "Substr/pos:output:0"
      input: "Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "Substr"
      }
    }
    node_def {
      name: "is_bmp/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "BM"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp/y"
      }
    }
    node_def {
      name: "is_bmp"
      op: "Equal"
      input: "Substr:output:0"
      input: "is_bmp/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "is_bmp:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "check_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/x"
      }
    }
    node_def {
      name: "check_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/y"
      }
    }
    node_def {
      name: "check_channels"
      op: "NotEqual"
      input: "check_channels/x:output:0"
      input: "check_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels"
      }
    }
    node_def {
      name: "Assert_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Const"
      }
    }
    node_def {
      name: "Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert/data_0"
      }
    }
    node_def {
      name: "Assert_1/Assert"
      op: "Assert"
      input: "check_channels:z:0"
      input: "Assert_1/Assert/data_0:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert"
      }
    }
    node_def {
      name: "DecodeBmp"
      op: "DecodeBmp"
      input: "substr_args_0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeBmp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeBmp:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    control_ret {
      key: "Assert_1/Assert"
      value: "Assert_1/Assert"
    }
  }
  function {
    signature {
      name: "__inference_tf_data_experimental_parallel_interleave_read_one_file_19"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "compression_type"
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 8388608
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_size"
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TFRecordDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_false_63"
      input_arg {
        name: "is_png_substr_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "cond_png_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_png"
    }
    node_def {
      name: "is_png/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/pos"
      }
    }
    node_def {
      name: "is_png/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/len"
      }
    }
    node_def {
      name: "is_png/Substr"
      op: "Substr"
      input: "is_png_substr_args_0"
      input: "is_png/Substr/pos:output:0"
      input: "is_png/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr"
      }
    }
    node_def {
      name: "is_png/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\211PN"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal/y"
      }
    }
    node_def {
      name: "is_png/Equal"
      op: "Equal"
      input: "is_png/Substr:output:0"
      input: "is_png/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal"
      }
    }
    node_def {
      name: "cond_png"
      op: "If"
      input: "is_png/Equal:z:0"
      input: "is_png_substr_args_0"
      input: "cond_png_decode_image_substr"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_png_false_82"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_png_true_81"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png"
      }
    }
    node_def {
      name: "cond_png/Identity"
      op: "Identity"
      input: "cond_png:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_png/Identity:output:0"
      input: "^cond_png"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_png"
      value: "cond_png"
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_scale_315"
      input_arg {
        name: "args_0"
        type: DT_UINT8
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_FLOAT
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "args_0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "truediv/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 255.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "truediv/y"
      }
    }
    node_def {
      name: "truediv"
      op: "RealDiv"
      input: "Cast:y:0"
      input: "truediv/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "truediv"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 28
            }
            dim {
              size: 28
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_classfunctools.partial_139"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "decode_image/cond_jpeg"
    }
    node_def {
      name: "decode_image/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/len"
      }
    }
    node_def {
      name: "decode_image/Substr"
      op: "Substr"
      input: "args_0"
      input: "decode_image/Substr/pos:output:0"
      input: "decode_image/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/len"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr"
      op: "Substr"
      input: "args_0"
      input: "decode_image/is_jpeg/Substr/pos:output:0"
      input: "decode_image/is_jpeg/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\377\330\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal/y"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal"
      op: "Equal"
      input: "decode_image/is_jpeg/Substr:output:0"
      input: "decode_image/is_jpeg/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg"
      op: "If"
      input: "decode_image/is_jpeg/Equal:z:0"
      input: "args_0"
      input: "decode_image/Substr:output:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_false_63"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_true_62"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg/Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg/Identity:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "decode_image/cond_jpeg"
      value: "decode_image/cond_jpeg"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_false_93"
      input_arg {
        name: "substr_args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
      control_output: "Assert_1/Assert"
    }
    node_def {
      name: "Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/pos"
      }
    }
    node_def {
      name: "Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/len"
      }
    }
    node_def {
      name: "Substr"
      op: "Substr"
      input: "substr_args_0"
      input: "Substr/pos:output:0"
      input: "Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "Substr"
      }
    }
    node_def {
      name: "is_bmp/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "BM"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp/y"
      }
    }
    node_def {
      name: "is_bmp"
      op: "Equal"
      input: "Substr:output:0"
      input: "is_bmp/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "is_bmp:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "check_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/x"
      }
    }
    node_def {
      name: "check_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/y"
      }
    }
    node_def {
      name: "check_channels"
      op: "NotEqual"
      input: "check_channels/x:output:0"
      input: "check_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels"
      }
    }
    node_def {
      name: "Assert_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Const"
      }
    }
    node_def {
      name: "Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert/data_0"
      }
    }
    node_def {
      name: "Assert_1/Assert"
      op: "Assert"
      input: "check_channels:z:0"
      input: "Assert_1/Assert/data_0:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert"
      }
    }
    node_def {
      name: "DecodeBmp"
      op: "DecodeBmp"
      input: "substr_args_0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeBmp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeBmp:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    control_ret {
      key: "Assert_1/Assert"
      value: "Assert_1/Assert"
    }
  }
  function {
    signature {
      name: "__inference__remote_init_func_345"
      input_arg {
        name: "remotecall_const"
        type: DT_STRING
      }
      input_arg {
        name: "remotecall_multideviceiteratortostringhandle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
      is_stateful: true
      control_output: "RemoteCall"
    }
    node_def {
      name: "RemoteCall"
      op: "RemoteCall"
      input: "remotecall_const"
      input: "remotecall_multideviceiteratortostringhandle"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__init_func_339"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "RemoteCall"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "RemoteCall:output:0"
      input: "^RemoteCall"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "RemoteCall"
      value: "RemoteCall"
    }
  }
  function {
    signature {
      name: "cond_gif_true_92"
      input_arg {
        name: "decodegif_args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_gif_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/x"
      }
    }
    node_def {
      name: "check_gif_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/y"
      }
    }
    node_def {
      name: "check_gif_channels"
      op: "NotEqual"
      input: "check_gif_channels/x:output:0"
      input: "check_gif_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels"
      }
    }
    node_def {
      name: "check_gif_channels_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/x"
      }
    }
    node_def {
      name: "check_gif_channels_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/y"
      }
    }
    node_def {
      name: "check_gif_channels_1"
      op: "NotEqual"
      input: "check_gif_channels_1/x:output:0"
      input: "check_gif_channels_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1"
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "check_gif_channels:z:0"
      input: "check_gif_channels_1:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "LogicalAnd"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "LogicalAnd:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeGif"
      op: "DecodeGif"
      input: "decodegif_args_0"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeGif"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeGif:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
  }
  function {
    signature {
      name: "__inference_Dataset_interleave_classfunctools.partial_177"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames/shape"
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames"
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorSliceDataset"
      }
    }
    node_def {
      name: "cycle_length"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cycle_length"
      }
    }
    node_def {
      name: "block_length"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "block_length"
      }
    }
    node_def {
      name: "sloppy"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
      experimental_debug_info {
        original_node_names: "sloppy"
      }
    }
    node_def {
      name: "buffer_output_elements"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_output_elements"
      }
    }
    node_def {
      name: "prefetch_input_elements"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "prefetch_input_elements"
      }
    }
    node_def {
      name: "ParallelInterleaveDataset"
      op: "ParallelInterleaveDataset"
      input: "TensorSliceDataset:handle:0"
      input: "cycle_length:output:0"
      input: "block_length:output:0"
      input: "sloppy:output:0"
      input: "buffer_output_elements:output:0"
      input: "prefetch_input_elements:output:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_tf_data_experimental_parallel_interleave_read_one_file_169"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParallelInterleaveDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "ParallelInterleaveDataset:handle:0"
      input: "^TensorSliceDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_false_82"
      input_arg {
        name: "cond_gif_args_0"
        type: DT_STRING
      }
      input_arg {
        name: "is_gif_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_gif"
    }
    node_def {
      name: "is_gif/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "GIF"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif/y"
      }
    }
    node_def {
      name: "is_gif"
      op: "Equal"
      input: "is_gif_decode_image_substr"
      input: "is_gif/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif"
      }
    }
    node_def {
      name: "cond_gif"
      op: "If"
      input: "is_gif:z:0"
      input: "cond_gif_args_0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_gif_false_93"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_gif_true_92"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif"
      }
    }
    node_def {
      name: "cond_gif/Identity"
      op: "Identity"
      input: "cond_gif:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_gif/Identity:output:0"
      input: "^cond_gif"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_gif"
      value: "cond_gif"
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_lambda_297"
      input_arg {
        name: "args_0"
        type: DT_UINT8
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "args_0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 28
            }
            dim {
              size: 28
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference__init_func_339"
      input_arg {
        name: "identity_multideviceiteratortostringhandle"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_STRING
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_multideviceiteratortostringhandle"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_classfunctools.partial_289"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "decode_image/cond_jpeg"
    }
    node_def {
      name: "decode_image/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/len"
      }
    }
    node_def {
      name: "decode_image/Substr"
      op: "Substr"
      input: "args_0"
      input: "decode_image/Substr/pos:output:0"
      input: "decode_image/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/len"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr"
      op: "Substr"
      input: "args_0"
      input: "decode_image/is_jpeg/Substr/pos:output:0"
      input: "decode_image/is_jpeg/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\377\330\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal/y"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal"
      op: "Equal"
      input: "decode_image/is_jpeg/Substr:output:0"
      input: "decode_image/is_jpeg/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg"
      op: "If"
      input: "decode_image/is_jpeg/Equal:z:0"
      input: "args_0"
      input: "decode_image/Substr:output:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_false_213"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_true_212"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg/Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg/Identity:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "args_1"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "decode_image/cond_jpeg"
      value: "decode_image/cond_jpeg"
    }
    arg_attr {
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
